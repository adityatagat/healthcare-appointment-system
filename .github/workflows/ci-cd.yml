name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}/api-gateway
  DOCKER_TAG: ${{ github.sha }}
  KUBE_NAMESPACE: healthcare-app
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Get npm cache directory
      id: npm-cache-dir
      working-directory: ./api-gateway
      run: |
        echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
    
    - name: Cache node modules
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: |
          ~/.npm
          ./api-gateway/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: 'api-gateway/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./api-gateway
      run: |
        # Create package-lock.json if it doesn't exist
        if [ ! -f package-lock.json ]; then
          npm install --package-lock-only
        fi
        npm ci
        
    - name: Run tests
      working-directory: ./api-gateway
      env:
        NODE_ENV: test
        CI: true
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        npm test -- --passWithNoTests -- --coverage
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./api-gateway/coverage/lcov.info
        fail_ci_if_error: false

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=sha,format=long
          type=ref,event=branch
          type=ref,event=pr
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./api-gateway
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=ghac,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: '<RESOURCE_GROUP_NAME>'
        cluster-name: '<AKS_CLUSTER_NAME>'

    - name: Checkout code
      uses: actions/checkout@v3
        
    - name: Deploy to Kubernetes (Staging)
      env:
        KUBE_NAMESPACE: ${{ env.KUBE_NAMESPACE }}-staging
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # The AZURE_CREDENTIALS secret is expected to be set in the repository's secrets configuration.
        helm upgrade --install api-gateway-staging ./k8s --namespace $KUBE_NAMESPACE \
          --set image.repository=${{ env.DOCKER_IMAGE }} \
          --set image.tag=${{ env.DOCKER_TAG }} \
          --set secrets.adminApiKey=${{ secrets.ADMIN_API_KEY }} \
          --set secrets.userApiKey=${{ secrets.USER_API_KEY }} \
          --set secrets.jwtSecret=${{ secrets.JWT_SECRET }} \
          --create-namespace --wait

  deploy-production:
    name: Deploy to Production (Blue-Green)
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: '<RESOURCE_GROUP_NAME>'
        cluster-name: '<AKS_CLUSTER_NAME>'

    - name: Checkout code
      uses: actions/checkout@v3
        
    - name: Deploy to Kubernetes (Production - Blue-Green)
      env:
        KUBE_NAMESPACE: ${{ env.KUBE_NAMESPACE }}-production
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # The AZURE_CREDENTIALS and other secrets are expected to be set in the repository's secrets configuration.
        # Linter warnings about them are expected and can be ignored.

        # Determine current active color from the service selector.
        # If the service doesn't exist or has no color label, we default to 'green' for the first deployment.
        CURRENT_COLOR=$(kubectl get svc api-gateway -n $KUBE_NAMESPACE -o jsonpath='{.spec.selector.app\.kubernetes\.io/color}' 2>/dev/null) || echo "green"

        if [ "$CURRENT_COLOR" = "blue" ]; then
          NEXT_COLOR="green"
        else
          NEXT_COLOR="blue"
        fi

        echo "Current active color: $CURRENT_COLOR"
        echo "Deploying new version with color: $NEXT_COLOR"

        # Use Helm to deploy the new version. The release name includes the color.
        helm upgrade --install api-gateway-production-$NEXT_COLOR ./k8s --namespace $KUBE_NAMESPACE \
          --set image.repository=${{ env.DOCKER_IMAGE }} \
          --set image.tag=${{ env.DOCKER_TAG }} \
          --set secrets.adminApiKey=${{ secrets.ADMIN_API_KEY }} \
          --set secrets.userApiKey=${{ secrets.USER_API_KEY }} \
          --set secrets.jwtSecret=${{ secrets.JWT_SECRET }} \
          --set color=$NEXT_COLOR \
          --create-namespace --wait

        echo "Switching service traffic to $NEXT_COLOR"
        # Switch the service to point to the new color.
        kubectl patch svc api-gateway -n $KUBE_NAMESPACE -p "{\"spec\":{\"selector\":{\"app.kubernetes.io/color\":\"$NEXT_COLOR\"}}}"

        # Clean up the old deployment if it exists and is different from the new one.
        if [ "$CURRENT_COLOR" != "" ] && [ "$CURRENT_COLOR" != "$NEXT_COLOR" ]; then
          echo "Scaling down and removing old deployment ($CURRENT_COLOR)"
          helm uninstall api-gateway-production-$CURRENT_COLOR -n $KUBE_NAMESPACE
        fi
