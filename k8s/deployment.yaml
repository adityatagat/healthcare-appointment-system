apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-{{ .Values.color }}
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: api-gateway
    app.kubernetes.io/color: {{ .Values.color }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      app.kubernetes.io/instance: api-gateway
      app.kubernetes.io/color: {{ .Values.color }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api-gateway
        app.kubernetes.io/instance: api-gateway
        app.kubernetes.io/color: {{ include "common.names.color" . | default "blue" }}
    spec:
      # Uncomment the following if pulling from a private registry:
      # imagePullSecrets:
      #   - name: regcred
      containers:
      - name: api-gateway
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        envFrom:
        - configMapRef:
            name: api-gateway-config
        - secretRef:
            name: api-gateway-secrets
        env:
        - name: PORT
          value: "8000"
        - name: NODE_ENV
          value: production
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
        fsGroupChangePolicy: "OnRootMismatch"
