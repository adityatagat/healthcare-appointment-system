version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
    depends_on:
      - user-service
      - appointment-service
    networks:
      - healthcare-network

  # User Service
  user-service:
    build: ./services/user-service
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_URI=mongodb://mongo:27017/user-service
    depends_on:
      - mongo
    networks:
      - healthcare-network

  # Appointment Service
  appointment-service:
    build:
      context: ./services/appointment-service
      target: development
    container_name: appointment-service
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_URI=postgresql://postgres:postgres@postgres:5432/appointment-service
      - METRICS_ENABLED=true
      - METRICS_PATH=/metrics
      - LOG_LEVEL=debug
      - PROMETHEUS_SERVER_PORT=3000
    volumes:
      - ./services/appointment-service:/app
      - /app/node_modules
      - appointment_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=3000"
      - "prometheus.path=/metrics"
      - "loki.service=appointment-service"

  # Provider Service
  provider-service:
    build: ./services/provider-service
    ports:
      - "3003:3003"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATA_MONGODB_URI=mongodb://provider_service:provider_password@provider-mongodb:27017/healthcare_providers?authSource=admin
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
      - MANAGEMENT_METRICS_TAG_APPLICATION=provider-service
      - MANAGEMENT_METRICS_TAG_REGION=local
      - LOKI_URL=http://loki:3100
    depends_on:
      - provider-mongodb
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=3003"
      - "prometheus.path=/actuator/prometheus"
      - "loki.service=provider-service"

  # Provider MongoDB
  provider-mongodb:
    image: mongo:6.0
    container_name: provider-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: healthcare_providers
    volumes:
      - provider_mongodb_data:/data/db
      - ./services/provider-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh -u root -p example localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthcare-network
    restart: unless-stopped
    labels:
      - "loki.service=provider-mongodb"

  # MongoDB for User Service
  mongo:
    image: mongo:6.0
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - healthcare-network

  # PostgreSQL for other services
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=appointment-service
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - healthcare-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - healthcare-network
    labels:
      - "loki.service=redis"

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - type: bind
        source: ./monitoring/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - healthcare-network

  # Logging
  loki:
    image: grafana/loki:2.8.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki-data:/loki
    environment:
      - LOKI_CONFIG_USE_LOKI_CONFIG=true
    user: "0:0"  # Run as root to ensure proper permissions
    networks:
      - healthcare-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=tempoSearch tempoBackendSearch tempoServiceGraph
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - loki
    networks:
      - healthcare-network

networks:
  healthcare-network:
    driver: bridge

volumes:
  mongo-data:
  postgres-data:
  provider_mongodb_data:
  loki-data:
  grafana-storage:
  appointment_logs:
